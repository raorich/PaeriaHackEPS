---
const apiUrl = import.meta.env.VITE_API_URL;

if (!apiUrl) {
  throw new Error("La URL de la API no está definida en el archivo .env");
}

// Interfaces para los datos
interface Parking {
  id: number;
  name: string;
  location: string;
  total_capacity: number;
  created_at: string | null;
  tickets: Ticket[]; // Añadimos los tickets al parking
}

interface Ticket {
  id: number;
  ubication: string;
  active: boolean; // true indica ocupado
}

// Inicializamos variables
let parkings: Parking[] = [];
let tickets: Ticket[] = [];

try {
  // Obtener los datos de los aparcamientos
  const responseParkings = await fetch(apiUrl + "get-parkings");
  if (!responseParkings.ok) {
    throw new Error("Error al obtener los datos de los aparcamientos");
  }
  const jsonDataParkings = await responseParkings.json();
  parkings = jsonDataParkings.data || [];

  // Obtener los datos de las plazas ocupadas
  const responseTickets = await fetch(apiUrl + "/get-tickets?parking_id=1&active=True");
  if (!responseTickets.ok) {
    throw new Error("Error al obtener los datos de los tickets");
  }
  const jsonDataTickets = await responseTickets.json();
  tickets = jsonDataTickets.data || [];

  // Combinamos los datos
  parkings = parkings.map((parking) => {
    // Filtramos los tickets que corresponden a este parking
    const ticketsForParking = tickets.filter(
      (ticket) => ticket.ubication.startsWith(parking.name)
    );
    return {
      ...parking,
      tickets: ticketsForParking, // Añadimos los tickets como propiedad de cada parking
    };
  });

  console.log(parkings)
} catch (error) {
  console.error("Error al obtener los datos:", error);
}
---

<!-- Contenido visual -->
<div>
  <h1 class="text-center text-2xl font-bold my-4">Aparcamientos Disponibles</h1>

  {parkings.length > 0 ? (
    <ul class="space-y-8">
      {parkings.map((parking) => (
        <li class="border p-4 rounded-md shadow-md">
          <h2 class="text-lg font-semibold">{parking.name}</h2>
          <p><strong>Ubicación: </strong>{parking.location}</p>
          <p><strong>Capacidad total: </strong>{parking.total_capacity}</p>
          <p><strong>Fecha de creación: </strong>{parking.created_at ? new Date(parking.created_at).toLocaleDateString() : "No disponible"}</p>
          
          <!-- Representación visual de las plazas -->
          <div class="grid grid-cols-4 gap-2 mt-4">
            {parking.tickets.map((ticket) => (
              <div
                class={`w-8 h-8 rounded ${ticket.active ? "bg-red-500" : "bg-green-500"}`}
                title={`Plaza ${ticket.ubication}: ${ticket.active ? "Ocupada" : "Libre"}`}
              ></div>
            ))}
            {/* Añadimos plazas libres si hay menos tickets que capacidad total */}
            {Array(parking.total_capacity - parking.tickets.length)
              .fill(null)
              .map(() => (
                <div class="w-8 h-8 rounded bg-green-300" title="Plaza Libre"></div>
              ))}
          </div>
        </li>
      ))}
    </ul>
  ) : (
    <p class="text-center text-gray-500">Cargando aparcamientos...</p>
  )}
</div>
